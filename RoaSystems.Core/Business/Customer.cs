using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RoaSystems.Core.Business
{
    class Customer
    {
    }
}




/*------------------------------------------------------------------------
<generated>
     This code was generated by The NuSoft Framework v2.0
     Generated at 12/9/2007 10:36:56 PM.

     The NuSoft Framework is an open source project developed
     by NuSoft Solutions (http://www.nusoftsolutions.com).
     The latest version of the framework templates and detailed license
     is available at http://www.codeplex.com/NuSoftFramework.

     This file will NOT be overwritten when regenerating your code.
</generated>
------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data;
using System.Data.SqlClient;
using System.Text;

using StevesBlinds.Core.Business.Framework;

namespace StevesBlinds.Core.Business
{
    /// <summary>
    /// This object represents the properties and methods of a Customer.
    /// </summary>
    public partial class Customer : EntityBase
    {
        public static EntityList<Customer> GetCustomersWithPasswords(int count)
        {
            return GetCustomers("TOP " + count.ToString(), " where Password <> 'N/A' and Password IS NOT NULL", new List<SqlParameter>());
        }

        /// <summary>
        /// Gets a collection of Customer objects by Email Address
        /// </summary>
        /// <param name="emailAddress">Email Address</param>
        /// <returns>A customer if found</returns>
        public static Customer GetCustomerByEmailAddress(string emailAddress)
        {
            string commandText = @"
SELECT 
" + Customer.SelectFieldList + @"
FROM 
	[dbo].[Customer] with (NOLOCK) 
WHERE 
	[Customer].[Email] = @EmailAddress " + Customer.DefaultSortOrder;

            List<SqlParameter> parameters = new List<SqlParameter>();
            parameters.Add(new SqlParameter("@EmailAddress", emailAddress));

            return GetOne<Customer>(commandText, parameters);
        }


        /// <summary>
        /// Gets a collection of Customer objects by Email Address
        /// </summary>
        /// <param name="emailAddress">Email Address</param>
        /// <returns>A customer if found</returns>
        public static Customer GetCustomerByLastNameAddressAndZip(string sLastName, string sAddress1, string sZip)
        {
            string commandText = @"
SELECT 
" + Customer.SelectFieldList + @"
FROM 
	[dbo].[Customer] with (NOLOCK) 
inner join address ba with (nolock) on ba.addressid = customer.BillingAddressID
inner join address sa with (nolock) on sa.addressid = customer.ShippingAddressID
WHERE 
	[Customer].[LastName] = @sLastName 
  	and ([ba].[Address1] = @sAddress1 or [ba].[Address2] = @sAddress1 or [sa].[Address1] = @sAddress1 or [sa].[Address2] = @sAddress1)
	and ([ba].[Zip] = @sZip or [ba].[Zip] = @sZip or [sa].[Zip] = @sZip or [sa].[Zip] = @sZip ) " + Customer.DefaultSortOrder;

            List<SqlParameter> parameters = new List<SqlParameter>();
            parameters.Add(new SqlParameter("@sLastName", sLastName));
            parameters.Add(new SqlParameter("@sAddress1", sAddress1));
            parameters.Add(new SqlParameter("@sZip", sZip));

            return GetOne<Customer>(commandText, parameters);
        }


        /// <summary>
        /// Retrieve information for a Customer by a Customer's unique identifier.
        /// </summary>
        /// <param name="CustomerID">CustomerID</param>
        /// <returns>Customer</returns>
        public static Customer GetCustomer(Guid guid)
        {
            string commandText = @"
SELECT 
" + Customer.SelectFieldList + @"
FROM [dbo].[Customer]  with (nolock) 
WHERE 
	[Customer].[CustomerGUID] = @CustomerGUID " + Customer.DefaultSortOrder;

            System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
            parameters.Add(new SqlParameter("@CustomerGUID", guid));

            return GetOne<Customer>(commandText, parameters);
        }

        /// <summary>
        /// Whether the current customer is anonymous
        /// </summary>
        public bool IsAnonymous
        {
            get
            {
                return Email.StartsWith("Anon_");
            }
        }

        /// <summary>
        /// Create New Anonymous customer  (Not saved)
        /// </summary>
        /// <returns></returns>
        public static Customer CreateAnonymousCustomer()
        {
            Customer returnValue = Customer.CreateCustomer();

            returnValue.CustomerGUID = Guid.NewGuid();

            while (Customer.GetCustomer(returnValue.CustomerGUID) != null)
            {
                returnValue.CustomerGUID = Guid.NewGuid();
            }

            returnValue.Email = "Anon_" + returnValue.CustomerGUID.ToString();

            return returnValue;
        }

        /// <summary>
        /// Resets the customers password and returns the unencrypted new password
        /// </summary>
        /// <returns></returns>
        public static string ResetPassword(Customer customer)
        {
            string newPassword = Core.Utility.GenerateTemporaryPassword();
            customer.Password = Controllers.SecurityController.EncryptData(newPassword);
            customer.Save();
            return newPassword;
        }

        /// <summary>
        /// Merge to existing customer
        /// </summary>
        /// <param name="anonymousCustomer"></param>
        /// <param name="existingCustomer"></param>
        /// <returns></returns>
        public static Customer TransferToCustomer(Customer anonymousCustomer, Customer existingCustomer)
        {
            if (!anonymousCustomer.IsAnonymous)
            {
                throw new ArgumentException("Input customer must be anonymous");
            }

            if (existingCustomer.IsAnonymous)
            {
                throw new ArgumentException("existing customer must not be anonymous");
            }

            if (existingCustomer.CustomerID <= 0)
            {
                throw new ArgumentException("existing customer must be a valid existing customer with customer id");
            }

            SqlHelper helper = new SqlHelper();
            helper.BeginTransaction();

            try
            {
                EntityList<ShoppingCart> shoppingCartList = ShoppingCart.GetShoppingCartsByCustomer(anonymousCustomer);

                foreach (ShoppingCart cart in shoppingCartList)
                {
                    cart.CustomerID = existingCustomer.CustomerID;
                }

                EntityList<CartName> cartNameList = CartName.GetCartNamesByCustomer(anonymousCustomer);

                foreach (CartName cartName in cartNameList)
                {
                    cartName.CustomerID = existingCustomer.CustomerID;

                    //  Check to see if they have a duplicate cart name.  If they do, 
                    //  do not add and change to the existing cart name id.
                    CartName existingCartName = CartName.GetCartName(existingCustomer.CustomerID, cartName.CartNameDescription);

                    if (existingCartName != null)
                    {
                        cartName.IsDeleted = true;

                        foreach (ShoppingCart cart in shoppingCartList)
                        {
                            if (cart.CartNameId == cartName.CartNameId)
                            {
                                cart.CartNameId = existingCartName.CartNameId;
                            }
                        }
                    }
                }

                EntityList<ShopperTracking> trackingList = ShopperTracking.GetShopperTrackingsByCustomer(anonymousCustomer);

                foreach (ShopperTracking tracking in trackingList)
                {
                    tracking.CustID = existingCustomer.CustomerID;
                }


                shoppingCartList.Save(helper);
                cartNameList.Save(helper);
                trackingList.Save(helper);

                helper.Commit();

                //  Customers that are temporary may have orders so we'll just try
                //  to cleanup if we can, if we can't then leave the customer in 
                //  place

                try
                {
                    anonymousCustomer.Delete();
                }
                catch { }
            }
            catch (Exception ex)
            {
                helper.Rollback();
                throw ex;
            }

            Customer customer = Customer.GetCustomer(existingCustomer.CustomerID);

            return customer;
        }

        /// <summary>
        /// Looks at the customers current shipping state if they are in HI or AK
        /// </summary>
        /// <returns></returns>
        public bool IsShippingToHIorAK()
        {
            bool isInHIorAKState = false;

            if (this.ShippingAddressID > 0)
            {
                Address shippingAddress = Address.GetAddress(this.ShippingAddressID);
                if (shippingAddress != null)
                {
                    if (!string.IsNullOrEmpty(shippingAddress.State))
                    {
                        State shippingState = State.GetState(int.Parse(shippingAddress.State));
                        if (shippingState != null)
                        {
                            if (shippingState.Abbreviation == "AK" || shippingState.Abbreviation == "HI")
                            {
                                isInHIorAKState = true;
                            }
                        }
                    }
                }
            }

            return isInHIorAKState;
        }

        /// <summary>
        /// Gets a count of orders for this customer
        /// </summary>
        /// <param name="customer"></param>
        /// <param name="cartTypeID"></param>
        /// <returns></returns>
        public int GetOrderCount()
        {
            int returnValue = 0;

            List<SqlParameter> list = new List<SqlParameter>();
            list.Add(new SqlParameter("CustomerID", this.CustomerID));

            string commandText = "SELECT COUNT([Orders].[OrderId]) FROM [dbo].[Orders]  with (nolock) WHERE [Orders].[CustomerID]=@CustomerID";

            using (SqlHelper helper = new SqlHelper())
            {
                using (IDataReader reader = helper.ExecuteDataReader(commandText, CommandType.Text, list))
                {
                    if (reader.Read())
                    {
                        returnValue = reader.GetInt32(0);
                    }
                }
            }

            return returnValue;
        }

        public override void Initialize(System.Data.IDataReader rs)
        {
            this.IsNew = false;
            this.IsDirty = false;
            if (!rs.IsDBNull(rs.GetOrdinal("CustomerID"))) { _customerID = DB.RSFieldInt(rs, "CustomerID"); }
            if (!rs.IsDBNull(rs.GetOrdinal("CustomerGUID"))) { _customerGUID = DB.RSFieldGUID2(rs, "CustomerGUID"); }
            if (!rs.IsDBNull(rs.GetOrdinal("CustomerLevelID"))) { _customerLevelID = DB.RSFieldInt(rs, "CustomerLevelID"); }
            if (!rs.IsDBNull(rs.GetOrdinal("RegisterDate"))) { _registerDate = DB.RSFieldDateTime(rs, "RegisterDate"); }
            if (!rs.IsDBNull(rs.GetOrdinal("Email"))) { _email = DB.RSField(rs, "Email"); }
            if (!rs.IsDBNull(rs.GetOrdinal("Password"))) { _password = DB.RSField(rs, "Password"); }
            if (!rs.IsDBNull(rs.GetOrdinal("DateOfBirth"))) { _dateOfBirth = DB.RSFieldDateTime(rs, "DateOfBirth"); }
            if (!rs.IsDBNull(rs.GetOrdinal("Gender"))) { _gender = DB.RSField(rs, "Gender"); }
            if (!rs.IsDBNull(rs.GetOrdinal("FirstName"))) { _firstName = DB.RSField(rs, "FirstName"); }
            if (!rs.IsDBNull(rs.GetOrdinal("LastName"))) { _lastName = DB.RSField(rs, "LastName"); }
            if (!rs.IsDBNull(rs.GetOrdinal("Notes"))) { _notes = DB.RSField(rs, "Notes"); }
            if (!rs.IsDBNull(rs.GetOrdinal("SiteID"))) { _siteID = DB.RSFieldInt(rs, "SiteID"); }
            if (!rs.IsDBNull(rs.GetOrdinal("Phone"))) { _phone = DB.RSField(rs, "Phone"); }
            if (!rs.IsDBNull(rs.GetOrdinal("AffiliateID"))) { _affiliateID = DB.RSFieldInt(rs, "AffiliateID"); }
            if (!rs.IsDBNull(rs.GetOrdinal("Referrer"))) { _referrer = DB.RSField(rs, "Referrer"); }
            if (!rs.IsDBNull(rs.GetOrdinal("CouponCode"))) { _couponCode = DB.RSField(rs, "CouponCode"); }
            if (!rs.IsDBNull(rs.GetOrdinal("OkToEmail"))) { _okToEmail = DB.RSFieldByte(rs, "OkToEmail"); }
            if (!rs.IsDBNull(rs.GetOrdinal("ButterfliesShown"))) { _butterfliesShown = DB.RSFieldByte(rs, "ButterfliesShown"); }
            if (!rs.IsDBNull(rs.GetOrdinal("IsAdmin"))) { _isAdmin = DB.RSFieldByte(rs, "IsAdmin"); }
            if (!rs.IsDBNull(rs.GetOrdinal("BillingEqualsShipping"))) { _billingEqualsShipping = DB.RSFieldByte(rs, "BillingEqualsShipping"); }
            if (!rs.IsDBNull(rs.GetOrdinal("LastIPAddress"))) { _lastIPAddress = DB.RSField(rs, "LastIPAddress"); }
            if (!rs.IsDBNull(rs.GetOrdinal("OrderNotes"))) { _orderNotes = DB.RSField(rs, "OrderNotes"); }
            if (!rs.IsDBNull(rs.GetOrdinal("SubscriptionExpiresOn"))) { _subscriptionExpiresOn = DB.RSFieldDateTime(rs, "SubscriptionExpiresOn"); }
            if (!rs.IsDBNull(rs.GetOrdinal("RTShipRequest"))) { _rTShipRequest = DB.RSField(rs, "RTShipRequest"); }
            if (!rs.IsDBNull(rs.GetOrdinal("RTShipResponse"))) { _rTShipResponse = DB.RSField(rs, "RTShipResponse"); }
            if (!rs.IsDBNull(rs.GetOrdinal("OrderOptions"))) { _orderOptions = DB.RSField(rs, "OrderOptions"); }
            if (!rs.IsDBNull(rs.GetOrdinal("LocaleSetting"))) { _localeSetting = DB.RSField(rs, "LocaleSetting"); }
            if (!rs.IsDBNull(rs.GetOrdinal("MicroPayBalance"))) { _microPayBalance = DB.RSFieldDecimal(rs, "MicroPayBalance"); }
            if (!rs.IsDBNull(rs.GetOrdinal("RecurringShippingMethodID"))) { _recurringShippingMethodID = DB.RSFieldInt(rs, "RecurringShippingMethodID"); }
            if (!rs.IsDBNull(rs.GetOrdinal("RecurringShippingMethod"))) { _recurringShippingMethod = DB.RSField(rs, "RecurringShippingMethod"); }
            if (!rs.IsDBNull(rs.GetOrdinal("BillingAddressID"))) { _billingAddressID = DB.RSFieldInt(rs, "BillingAddressID"); }
            if (!rs.IsDBNull(rs.GetOrdinal("ShippingAddressID"))) { _shippingAddressID = DB.RSFieldInt(rs, "ShippingAddressID"); }
            if (!rs.IsDBNull(rs.GetOrdinal("GiftRegistryGUID"))) { _giftRegistryGUID = DB.RSFieldGUID2(rs, "GiftRegistryGUID"); }
            if (!rs.IsDBNull(rs.GetOrdinal("GiftRegistryIsAnonymous"))) { _giftRegistryIsAnonymous = DB.RSFieldByte(rs, "GiftRegistryIsAnonymous"); }
            if (!rs.IsDBNull(rs.GetOrdinal("GiftRegistryAllowSearchByOthers"))) { _giftRegistryAllowSearchByOthers = DB.RSFieldByte(rs, "GiftRegistryAllowSearchByOthers"); }
            if (!rs.IsDBNull(rs.GetOrdinal("GiftRegistryNickName"))) { _giftRegistryNickName = DB.RSField(rs, "GiftRegistryNickName"); }
            if (!rs.IsDBNull(rs.GetOrdinal("GiftRegistryHideShippingAddresses"))) { _giftRegistryHideShippingAddresses = DB.RSFieldByte(rs, "GiftRegistryHideShippingAddresses"); }
            if (!rs.IsDBNull(rs.GetOrdinal("CODCompanyCheckAllowed"))) { _cODCompanyCheckAllowed = DB.RSFieldByte(rs, "CODCompanyCheckAllowed"); }
            if (!rs.IsDBNull(rs.GetOrdinal("CODNet30Allowed"))) { _cODNet30Allowed = DB.RSFieldByte(rs, "CODNet30Allowed"); }
            if (!rs.IsDBNull(rs.GetOrdinal("ExtensionData"))) { _extensionData = DB.RSField(rs, "ExtensionData"); }
            if (!rs.IsDBNull(rs.GetOrdinal("FinalizationData"))) { _finalizationData = DB.RSField(rs, "FinalizationData"); }
            if (!rs.IsDBNull(rs.GetOrdinal("PaymentMethod"))) { _paymentMethod = DB.RSField(rs, "PaymentMethod"); }
            if (!rs.IsDBNull(rs.GetOrdinal("CreatedOn"))) { _createdOn = DB.RSFieldDateTime(rs, "CreatedOn"); }
            if (!rs.IsDBNull(rs.GetOrdinal("Over13Checked"))) { _over13Checked = DB.RSFieldByte(rs, "Over13Checked"); }
            if (!rs.IsDBNull(rs.GetOrdinal("CurrencySetting"))) { _currencySetting = DB.RSField(rs, "CurrencySetting"); }
            if (!rs.IsDBNull(rs.GetOrdinal("HintQuestionId"))) { _hintQuestionId = DB.RSFieldInt(rs, "HintQuestionId"); }
            if (!rs.IsDBNull(rs.GetOrdinal("CreateUserId"))) { _createUserId = DB.RSFieldInt(rs, "CreateUserId"); }
            if (!rs.IsDBNull(rs.GetOrdinal("UpdatedOn"))) { _updatedOn = DB.RSFieldDateTime(rs, "UpdatedOn"); }
            if (!rs.IsDBNull(rs.GetOrdinal("UpdateUserId"))) { _updateUserId = DB.RSFieldInt(rs, "UpdateUserId"); }
            if (!rs.IsDBNull(rs.GetOrdinal("HintAnswer"))) { _hintAnswer = DB.RSField(rs, "HintAnswer"); }
            if (!rs.IsDBNull(rs.GetOrdinal("SOAPrimaryMediaSourceId"))) { _sOAPrimaryMediaSourceId = DB.RSFieldInt(rs, "SOAPrimaryMediaSourceId"); }
            if (!rs.IsDBNull(rs.GetOrdinal("SOASecondaryMediaSourceId"))) { _sOASecondaryMediaSourceId = DB.RSFieldInt(rs, "SOASecondaryMediaSourceId"); }
            if (!rs.IsDBNull(rs.GetOrdinal("SOAPrimaryMediaSourceKeywordId"))) { _sOAPrimaryMediaSourceKeywordId = DB.RSFieldInt(rs, "SOAPrimaryMediaSourceKeywordId"); }
            if (!rs.IsDBNull(rs.GetOrdinal("SOASecondaryMediaSourceKeywordId"))) { _sOASecondaryMediaSourceKeywordId = DB.RSFieldInt(rs, "SOASecondaryMediaSourceKeywordId"); }
            if (!rs.IsDBNull(rs.GetOrdinal("AltPhone"))) { _altPhone = DB.RSField(rs, "AltPhone"); }
            if (!rs.IsDBNull(rs.GetOrdinal("URLKeywords"))) { _uRLKeywords = DB.RSField(rs, "URLKeywords"); }
            if (!rs.IsDBNull(rs.GetOrdinal("TransactionSource"))) { _transactionSource = DB.RSField(rs, "TransactionSource"); }
            if (!rs.IsDBNull(rs.GetOrdinal("CustLastVisitedSite"))) { _custLastVisitedSite = DB.RSFieldInt(rs, "CustLastVisitedSite"); }
            if (!rs.IsDBNull(rs.GetOrdinal("BMLAccountNumber"))) { _BMLAccountNumber = DB.RSField(rs, "BMLAccountNumber"); }
        }
    }
}
